{"/home/travis/build/npmtest/node-npmtest-grunt-contrib-connect/test.js":"/* istanbul instrument in package npmtest_grunt_contrib_connect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-connect/lib.npmtest_grunt_contrib_connect.js":"/* istanbul instrument in package npmtest_grunt_contrib_connect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_contrib_connect = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_contrib_connect = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-connect/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-contrib-connect && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_contrib_connect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_contrib_connect\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_contrib_connect.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_contrib_connect.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_contrib_connect.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_contrib_connect.__dirname + '/lib.npmtest_grunt_contrib_connect.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-connect/node_modules/grunt-contrib-connect/tasks/connect.js":"/*\n * grunt-contrib-connect\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n  var path = require('path');\n  var connect = require('connect');\n  var morgan = require('morgan');\n  var serveStatic = require('serve-static');\n  var serveIndex = require('serve-index');\n  var http = require('http');\n  var https = require('https');\n  var http2 = require('http2');\n  var injectLiveReload = require('connect-livereload');\n  var open = require('opn');\n  var portscanner = require('portscanner');\n  var async = require('async');\n  var util = require('util');\n\n  var MAX_PORTS = 30; // Maximum available ports to check after the specified port\n\n  var createDefaultMiddleware = function createDefaultMiddleware(connect, options) {\n    var middlewares = [];\n    if (!Array.isArray(options.base)) {\n      options.base = [options.base];\n    }\n    // Options for serve-static module. See https://www.npmjs.com/package/serve-static\n    var defaultStaticOptions = {};\n    var directory = options.directory || options.base[options.base.length - 1];\n    options.base.forEach(function(base) {\n      // Serve static files.\n      var path = base.path || base;\n      var staticOptions = base.options || defaultStaticOptions;\n      middlewares.push(serveStatic(path, staticOptions));\n    });\n    // Make directory browse-able.\n    middlewares.push(serveIndex(directory.path || directory));\n    return middlewares;\n  };\n\n  grunt.registerMultiTask('connect', 'Start a connect web server.', function() {\n    var done = this.async();\n    // Merge task-specific options with these defaults.\n    var options = this.options({\n      protocol: 'http',\n      port: 8000,\n      hostname: '0.0.0.0',\n      base: '.',\n      directory: null,\n      keepalive: false,\n      debug: false,\n      livereload: false,\n      open: false,\n      useAvailablePort: false,\n      onCreateServer: null,\n      // if nothing passed, then is set below 'middleware = createDefaultMiddleware.call(this, connect, options);'\n      middleware: null\n    });\n\n    if (options.protocol !== 'http' && options.protocol !== 'https' && options.protocol !== 'http2') {\n      grunt.fatal('protocol option must be \\'http\\', \\'https\\' or \\'http2\\'');\n    }\n\n    if (options.protocol === 'http2' && /^0.(?:1|2|3|4|5|6|7|8|9|10|11)\\./.test(process.versions.node)) {\n      grunt.fatal('can\\'t use http2 with node < 0.12, see https://github.com/molnarg/node-http2/issues/101');\n    }\n\n    // Connect requires the base path to be absolute.\n    if (Array.isArray(options.base)) {\n      options.base = options.base.map(function(base) {\n        if (base.path) {\n          base.path = path.resolve(base.path);\n          return base;\n        }\n        return path.resolve(base);\n      });\n    } else {\n      if (options.base.path) {\n        options.base.path = path.resolve(options.base.path);\n      } else {\n        options.base = path.resolve(options.base);\n      }\n    }\n\n    // Connect will listen to all interfaces if hostname is null.\n    if (options.hostname === '*') {\n      options.hostname = '';\n    }\n\n    // Connect will listen to ephemeral port if asked\n    if (options.port === '?') {\n      options.port = 0;\n    }\n\n    if (options.onCreateServer && !Array.isArray(options.onCreateServer)) {\n      options.onCreateServer = [options.onCreateServer];\n    }\n\n    //  The middleware options may be null, an array of middleware objects,\n    //  or a factory function that creates an array of middleware objects.\n    //  * For a null value, use the default array of middleware\n    //  * For a function, include the default array of middleware as the last arg\n    //    which enables the function to patch the default middleware without needing to know\n    //    the implementation of the default middleware factory function\n    var middleware;\n    if (options.middleware instanceof Array) {\n      middleware = options.middleware;\n    } else {\n      middleware = createDefaultMiddleware.call(this, connect, options);\n\n      if (typeof options.middleware === 'function') {\n        middleware = options.middleware.call(this, connect, options, middleware);\n      }\n    }\n\n    // If --debug was specified, enable logging.\n    if (grunt.option('debug') || options.debug === true) {\n      middleware.unshift(morgan('dev'));\n    }\n\n    // Start server.\n    var taskTarget = this.target;\n    var keepAlive = this.flags.keepalive || options.keepalive;\n\n    async.waterfall([\n      // find a port for livereload if needed first\n      function(callback) {\n\n        // Inject live reload snippet\n        if (options.livereload !== false) {\n          if (options.livereload === true) {\n            options.livereload = 35729;\n          }\n\n          // TODO: Add custom ports here?\n          middleware.unshift(injectLiveReload({port: options.livereload, hostname: options.hostname}));\n          callback(null);\n        } else {\n          callback(null);\n        }\n      },\n      function() {\n\n        var app = connect();\n        var server = null;\n        var httpsOptions = {\n          key: options.key || grunt.file.read(path.join(__dirname, 'certs', 'server.key')).toString(),\n          cert: options.cert || grunt.file.read(path.join(__dirname, 'certs', 'server.crt')).toString(),\n          ca: options.ca || grunt.file.read(path.join(__dirname, 'certs', 'ca.crt')).toString(),\n          passphrase: options.passphrase || 'grunt'\n        };\n\n        middleware.forEach(function (m) {\n          if (!util.isArray(m)) {\n            m = [m];\n          }\n          app.use.apply(app, m);\n        });\n\n        if (options.protocol === 'https') {\n          server = https.createServer(httpsOptions, app);\n        } else if (options.protocol === 'http2') {\n          server = http2.createServer(httpsOptions, app);\n        } else {\n          server = http.createServer(app);\n        }\n\n        // Call any onCreateServer functions that are present\n        if (options.onCreateServer) {\n          options.onCreateServer.forEach(function(func) {\n            func.call(null, server, connect, options);\n          });\n        }\n\n        function findUnusedPort(port, maxPort, hostname, callback) {\n          if (hostname === '0.0.0.0') {\n            hostname = '127.0.0.1';\n          }\n\n          if (port === 0) {\n            async.nextTick(function() {\n              callback(null, 0);\n            });\n          } else {\n            portscanner.findAPortNotInUse(port, maxPort, hostname, callback);\n          }\n        }\n\n        findUnusedPort(options.port, options.port + MAX_PORTS, options.hostname, function(error, foundPort) {\n          if (error) {\n            grunt.log.writeln('Failed to find unused port: ' + error);\n          }\n\n          // if the found port doesn't match the option port, and we are forced to use the option port\n          if (options.port !== foundPort && options.useAvailablePort === false) {\n            grunt.fatal('Port ' + options.port + ' is already in use by another process.');\n          }\n\n          server\n            .listen(foundPort, options.hostname)\n            .on('listening', function() {\n              var port = foundPort;\n              var scheme = options.protocol === 'http2' ? 'https' : options.protocol;\n              var hostname = options.hostname || '0.0.0.0';\n              var targetHostname = hostname === '0.0.0.0' ? 'localhost' : hostname;\n              var target = scheme + '://' + targetHostname + ':' + port;\n\n              grunt.log.writeln('Started connect web server on ' + target);\n              grunt.config.set('connect.' + taskTarget + '.options.hostname', hostname);\n              grunt.config.set('connect.' + taskTarget + '.options.port', port);\n\n              grunt.event.emit('connect.' + taskTarget + '.listening', hostname, port);\n\n              if (options.open === true) {\n                open(target);\n              } else if (typeof options.open === 'object') {\n                options.open.target = options.open.target || target;\n                options.open.appName = options.open.appName || null;\n                options.open.callback = options.open.callback || function() {};\n                open(options.open.target, options.open.appName, options.open.callback);\n              } else if (typeof options.open === 'string') {\n                open(options.open);\n              }\n\n              if (!keepAlive) {\n                done();\n              }\n            })\n            .on('error', function(err) {\n              if (err.code === 'EADDRINUSE') {\n                grunt.fatal('Port ' + foundPort + ' is already in use by another process.');\n              } else {\n                grunt.fatal(err);\n              }\n            });\n        });\n\n        // So many people expect this task to keep alive that I'm adding an option\n        // for it. Running the task explicitly as grunt:keepalive will override any\n        // value stored in the config. Have fun, people.\n        if (keepAlive) {\n          // This is now an async task. Since we don't call the \"done\"\n          // function, this task will never, ever, ever terminate. Have fun!\n          grunt.log.write('Waiting forever...\\n');\n        }\n      }\n    ]);\n  });\n};\n"}